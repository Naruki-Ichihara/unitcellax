name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build development container
      run: |
        docker compose build --no-cache
        
    - name: Start development environment
      run: |
        docker compose up -d
        
    - name: Wait for container to be ready
      run: |
        # Wait for container to be fully started
        sleep 10
        docker compose ps
        
    - name: Install FEniCS and dependencies
      run: |
        docker exec unitcellax bash -c "
          # Install FEniCS (required manual step due to MPI issues)
          apt update && apt install -y fenicsx
          
          # Install package in development mode
          pip install -e .
          
          # Install pytest for testing
          pip install pytest
        "
        
    - name: Verify GPU access (if available)
      run: |
        docker exec unitcellax bash -c "
          # Check if nvidia-smi is available (will fail gracefully in CI)
          nvidia-smi || echo 'GPU not available in CI environment (expected)'
        "
        
    - name: Run environment validation tests
      run: |
        docker exec unitcellax bash -c "
          cd /workspace
          python tests/test_environment.py
        "
        
    - name: Run core tests
      run: |
        docker exec unitcellax bash -c "
          cd /workspace
          pytest tests/ -v --tb=short --disable-warnings
        "
        
    - name: Run PBC-specific tests
      run: |
        docker exec unitcellax bash -c "
          cd /workspace
          pytest tests/test_pbc.py -v --tb=short
        "
        
    - name: Run basis function tests
      run: |
        docker exec unitcellax bash -c "
          cd /workspace
          pytest tests/test_basis.py -v --tb=short || echo 'Basis tests may fail without full FEniCS setup'
        "
        
    - name: Clean up
      if: always()
      run: |
        docker compose down
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install linting tools
      run: |
        pip install flake8 black isort
        
    - name: Run black (code formatting)
      run: |
        black --check --diff unitcellax/ tests/ || echo "Black formatting issues found (non-blocking)"
        
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff unitcellax/ tests/ || echo "Import sorting issues found (non-blocking)"
        
    - name: Run flake8 (style checking)
      run: |
        flake8 unitcellax/ tests/ --max-line-length=100 --extend-ignore=E203,W503 || echo "Style issues found (non-blocking)"
        
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run bandit (security linting)
      run: |
        bandit -r unitcellax/ -f json -o bandit-report.json || echo "Security issues found (non-blocking)"
        
    - name: Run safety (dependency security check)
      run: |
        safety check --json --output safety-report.json || echo "Dependency security issues found (non-blocking)"
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json